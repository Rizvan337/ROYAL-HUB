<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body { 
            font-family: 'Nunito', sans-serif; 
            background-color: #f3f6f9; 
            transition: background-color 0.3s ease;
        }
        .sidebar { 
            background-color: hsl(214, 53%, 94%); 
            min-height: 100vh; 
            transition: all 0.3s ease;
        }
        .sidebar a { 
            color: #333; 
            text-decoration: none; 
            transition: all 0.3s ease;
            display: block;
            padding: 10px 15px;
            margin-bottom: 5px;
            border-radius: 5px;
        }
        .sidebar a:hover { 
            background-color: #457b9d; 
            color: white; 
            transform: translateX(5px);
        }
        .order-card { 
            background-color: white; 
            border-radius: 12px; 
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            overflow: hidden;
        }
        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 20px rgba(0, 0, 0, 0.15);
        }
        .status-badge { 
            padding: 5px 10px; 
            border-radius: 8px; 
            font-weight: bold; 
            display: inline-block;
            transition: all 0.3s ease;
        }
        .status-delivered { background-color: #2a9d8f; color: white; }
        .status-cancelled { background-color: #e63946; color: white; }
        .status-pending { background-color: #f4a261; color: white; }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideInFromLeft {
            from { transform: translateX(-50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideInFromRight {
            from { transform: translateX(50px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @keyframes slideInFromTop {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        .animate-fade-in { animation: fadeIn 0.5s ease-out; }
        .animate-slide-left { animation: slideInFromLeft 0.5s ease-out; }
        .animate-slide-right { animation: slideInFromRight 0.5s ease-out; }
        .animate-slide-top { animation: slideInFromTop 0.5s ease-out; }
        
        /* Enhanced UI */
        .header {
            background-color: #ffffff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .btn-custom {
            transition: all 0.3s ease;
        }
        .btn-custom:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .order-image {
            transition: all 0.3s ease;
        }
        .order-card:hover .order-image {
            transform: scale(1.05);
        }
        .pagination .page-link {
            transition: all 0.3s ease;
        }
        .pagination .page-link:hover {
            background-color: #457b9d;
            color: white;
        }
    </style>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>
<body>
    <header class="header py-3 animate-slide-top">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-6">
                    <h1 class="h4 mb-0">My Orders</h1>
                </div>
                <div class="col-6 text-end">
                    <a href="/userProfile" class="btn btn-outline-primary me-2 btn-custom">Profile</a>
                    <a href="/logout" class="btn btn-outline-danger btn-custom">Logout</a>
                </div>
            </div>
        </div>
    </header>

    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-3 col-lg-2 d-md-block sidebar collapse animate-slide-left">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item"><a class="nav-link" href="/userProfile"><i class="fas fa-user-circle"></i> My Profile</a></li>
                        <li class="nav-item"><a class="nav-link" href="/addressManage"><i class="fas fa-map-marker-alt"></i> My Address</a></li>
                        <li class="nav-item"><a class="nav-link active" href="/my-orders"><i class="fas fa-box"></i> Orders</a></li>
                        <li class="nav-item"><a class="nav-link" href="/getWallet"><i class="fas fa-wallet"></i> Wallet</a></li>
                        <li class="nav-item"><a class="nav-link" href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
                    </ul>
                </div>
            </nav>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 animate-fade-in">
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <h2>Your Orders</h2>
                </div>

                <div class="row row-cols-1 row-cols-md-2 g-4">
                    <% if (orders.length) { %>
                        <% orders.forEach((order, index) => { %>
                            <div class="col animate-fade-in" style="animation-delay: '<%= index * 0.1 %>s;'">
                                <div class="card order-card h-100">
                                    <div class="row g-0">
                                        <div class="col-md-4">
                                            <img src="/uploads/re-image/<%= order.orderItems[0].product.productImage[0] %>" class="img-fluid rounded-start order-image" alt="<%= order.orderItems[0].product.productName %>">
                                        </div>
                                        <div class="col-md-8">
                                            <div class="card-body">
                                                <h5 class="card-title">Order ID: <%= order.orderId %></h5>
                                                <p class="card-text">Date: <%= moment(order.invoiceDate).format('MMMM Do YYYY') %></p>
                                                <p class="card-text">
                                                    Status: 
                                                    <span class="status-badge <%= order.status === 'Delivered' ? 'status-delivered' : order.status === 'Cancelled' ? 'status-cancelled' : 'status-pending' %>">
                                                        <%= order.status %>
                                                    </span>
                                                </p>
                                                <p class="card-text">Total: $<%= order.finalAmount.toFixed(2) %></p>
                                                <div class="d-flex justify-content-end mt-3">
                                                    <button class="btn btn-primary btn-sm me-2 btn-custom" onclick="window.location.href='/orders/<%= order._id %>'">View Details</button>
                                                    <% if (order.status === 'Failed') { %>
                                                        <button class="btn btn-warning btn-sm btn-custom" onclick="retryPayment('<%= order._id %>','<%=order.finalAmount.toFixed(2)%>')">Retry</button>
                                                    <% } else if (order.status === 'Delivered') { %>
                                                        <button class="btn btn-secondary btn-sm me-2 btn-custom" onclick="downloadInvoice('<%= order._id %>')">Download Invoice</button>
                                                        <button class="btn btn-info btn-sm btn-custom" onclick="returnOrder('<%= order._id %>')">Return</button>
                                                    <% } else if (order.status !== 'Cancelled' && order.status !== 'Returned') { %>
                                                        <button class="btn btn-danger btn-sm btn-custom" onclick="cancelOrder('<%= order._id %>')">Cancel</button>
                                                    <% } %>
                                                </div>
                                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <% }) %>
    <% } else { %>
        <div class="col-12 animate-fade-in">
            <p class="text-center">No orders found.</p>
        </div>
    <% } %>
</div>

                <nav aria-label="Page navigation" class="mt-4 animate-slide-top">
                    <ul class="pagination justify-content-center">
                        <% if (currentPage > 1) { %>
                            <li class="page-item"><a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a></li>
                        <% } %>
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= i === currentPage ? 'active' : '' %>"><a class="page-link" href="?page=<%= i %>"><%= i %></a></li>
                        <% } %>
                        <% if (currentPage < totalPages) { %>
                            <li class="page-item"><a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a></li>
                        <% } %>
                    </ul>
                </nav>
            </main>
        </div>
    </div>

    
    
       



  
  
  <footer>
    <p>&copy; 2024 My Orders App</p>
  </footer>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    async function cancelOrder(orderId) {
      const { isConfirmed } = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
      });
      if (isConfirmed) {
        try {
          const response = await fetch(`/orders/${orderId}/cancel`, { method: 'POST' });
          const result = await response.json();
          if (result.success) {
            Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success');
            location.reload();
          } else {
            Swal.fire('Error', 'Failed to cancel the order.', 'error');
          }
        } catch (error) {
          Swal.fire('Error', 'Something went wrong!', 'error');
        }
      }
    }





    
async function returnOrder(orderId) {
  const {isConfirmed} = await Swal.fire({
    title: 'Are you sure?',
  text: "Do you really want to return this order?",
  icon: 'warning',
  showCancelButton: true,
  toast:true,
  confirmButtonText: 'Yes, return it!',
  cancelButtonText: 'No, keep it'
  })  
  if(isConfirmed){
    try {
      const response = await fetch(`/orders/${orderId}/return`, { method: 'POST' });
    const result = await response.json();
    if (result.success) {
      // Update status on successful cancellation
      document.querySelector(`#status-${orderId}`).textContent = 'Returned';
      Swal.fire('Returned!', 'Your order has been returned.', 'success'); // Show success message
    } else {
      // Handle failure response
      Swal.fire('Error', 'Failed to return the order. Please try again.', 'error');
    }
    } catch (error) {
      console.error('Error cancelling order:', error);
    Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    }
  }
}

    function downloadInvoice(orderId) {
      window.location.href = `/orders/${orderId}/invoice/download`;
    }













    async function retryPayment(orderId, totalAmount) {
    try {
        // Fetch the order details from the server
        const orderResponse = await fetch("/razorPay", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ amount: totalAmount })
        });

        if (!orderResponse.ok) {
            console.error('Failed to fetch order:', orderResponse.statusText);
            return;
        }

        const order = await orderResponse.json();
        alert(order.id);

        // Razorpay options for the transaction
        const options = {
            key: "rzp_test_O848cmRqiiSDQM", // Test key, replace with your live key in production
            amount: order.amount,
            currency: "INR",
            name: "Test Company",
            description: "Test Transaction",
            order_id: order.id,
            handler: async function (response) {
                console.log("Payment success response:", response);

                // Validate the necessary response data
                if (!response.razorpay_order_id || !response.razorpay_payment_id || !response.razorpay_signature) {
                    console.error("Missing required payment response data");
                    return;
                }

                try {
                   
                    const verifyResponse = await fetch('/verify', {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            selectedAddress, 
                            paymentMethod  
                        }),
                    });

                    if (!verifyResponse.ok) {
                        console.error('Failed to verify payment:', verifyResponse.statusText);
                        return;
                    }

                    const verificationResult = await verifyResponse.json();
                    // Handle payment verification result
                    if (verificationResult.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Payment verified and order placed successfully!",
                        });
                        window.location.href = `/invoice/${verificationResult.orderId}`;
                    } else {
                        Swal.fire("Error", "Payment verification failed.", "error");
                    }
                } catch (error) {
                    console.error("Error during verification request:", error);
                    Swal.fire("Error", "Something went wrong during payment verification.", "error");
                }
            },
            prefill: {
                name: "Rizvan",
                email: "rizvanichu17@gmail.com",
                contact: "1234567890",
            },
        };

        // Initialize Razorpay instance
        const rzp1 = new Razorpay(options);

        // Handle payment failure event
        rzp1.on('payment.failed', function (response) {
            console.error("Payment failed:", response.error.description);
            Swal.fire("Payment Failed", response.error.description, "error");

            // Handle payment failure on the server (if necessary)
            fetch("/handlePaymentFailure", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    razorpay_order_id: order.id,
                    paymentError: response.error.description,
                    selectedAddress,  // Ensure selectedAddress is defined
                    paymentMethod:"Razorpay",     // Ensure paymentMethod is defined
                }),
            });
        });

        // Open Razorpay payment modal
        rzp1.open();

    } catch (error) {
        console.error("Error during payment processing:", error);
        Swal.fire("Error", "Something went wrong during payment processing.", "error");
    }
}










function animateOnScroll() {
            const animatedElements = document.querySelectorAll('.animate-fade-in, .animate-slide-left, .animate-slide-right, .animate-slide-top');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.animationPlayState = 'running';
                        observer.unobserve(entry.target);
                    }
                });
            });

            animatedElements.forEach(el => {
                el.style.animationPlayState = 'paused';
                observer.observe(el);
            });
        }

        // Call the function when the page loads
        document.addEventListener('DOMContentLoaded', animateOnScroll);

        // Trigger animations when new content is loaded (e.g., after pagination)
        function triggerAnimations() {
            const animatedElements = document.querySelectorAll('.animate-fade-in, .animate-slide-left, .animate-slide-right, .animate-slide-top');
            animatedElements.forEach(el => {
                el.style.animation = 'none';
                el.offsetHeight; // Trigger reflow
                el.style.animation = null;
            });
        }


  </script>
</body>

</html>
