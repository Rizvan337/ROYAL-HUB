<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Confirmation</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f7f7f7;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            background-color: #fff;
            margin: auto;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        }
        .section-title {
            font-size: 1.8rem;
            color: #ff6f61;
            margin-bottom: 20px;
        }
        .address-card {
            background-color: #fafafa;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #eee;
            margin-bottom: 20px;
        }
        .summary-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .summary-table td {
            padding: 10px 0;
            border-bottom: 1px solid #f1f1f1;
        }
        .summary-table tr:last-child td {
            border-bottom: none;
            font-weight: bold;
        }
        .place-order-btn {
            background-color: #4caf50;
            color: #fff;
            padding: 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s ease;
            margin-top: 20px;
        }
        .place-order-btn:hover {
            background-color: #43a047;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2 class="section-title">Order Confirmation</h2>

        <!-- Selected Address -->
        <div class="address-card">
            <h3>Delivering To:</h3>
            <p><strong><%= address.name %></strong></p>
            <p><%= address.street %>, <%= address.city %>, <%= address.state %></p>
            <p>Pin: <%= address.zip %>, Phone: <%= address.phone %></p>
        </div>

        <!-- Order Summary -->
        <h3>Order Summary</h3>
        <table class="summary-table">
            <% cartItems.forEach(item => { %>
                <tr>
                    <td><%= item.item.productName %> (x<%= item.qty %>)</td>
                    <td>₹<%= item.qty * item.item.salePrice %></td>
                </tr>
            <% }) %>
            <tr><td>Subtotal:</td><td>₹<%= subtotal %></td></tr>
            <tr><td>Discount:</td><td>₹<%= discount %></td></tr>
            <tr><td>Total:</td><td>₹<%= grandTotal %></td></tr>
        </table>

        <!-- Payment Method -->
        <div>
            <h3>Payment Method: <%= paymentMethod %></h3>
        </div>

        <!-- Place Order Button -->
        <form method="POST" onclick="return placeOrder(event)">
            <input type="hidden" id="selectedAddress" name="selectedAddress" value="<%= address._id %>">
            <input type="hidden" id="totalAmount" name="totalAmount" value="<%= grandTotal %>">
            <input type="hidden" id="paymentMethod" name="paymentMethod" value="<%= paymentMethod %>">
            <button type="submit" class="place-order-btn">
                <i class="fas fa-shopping-cart"></i> Confirm & Place Order
            </button>
        </form>
    </div>
    
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        async function placeOrder(event) {
            event.preventDefault()

    const paymentMethod = document.getElementById("paymentMethod").value
    const totalAmount = document.getElementById("totalAmount").value
    const selectedAddress = document.getElementById("selectedAddress").value
    if (paymentMethod !== "Razorpay") {
        Swal.fire({
            title: 'Confirm Order',
            text: `Do you want to place the order with ${paymentMethod}?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, place it!',
            cancelButtonText: 'No, cancel!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch("/placeOrder", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ selectedAddress,totalAmount,paymentMethod })
                })
                .then(response => response.json())
                .then(data => handleOrderResponse(data))
                .catch(handleOrderError);
            }
        });
    } else {
        try {
    // Create the order with the amount
    const orderResponse = await fetch("/razorPay", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount:totalAmount})
    });
    const order = await orderResponse.json();

    // Initialize Razorpay payment options
    const options = {
        key: "rzp_test_O848cmRqiiSDQM", // Your Razorpay Key
        amount: order.amount,
        currency: "INR",
        name: "Test Company",
        description: "Test Transaction",
        order_id: order.id,
        handler: async function (response) {
            // Send the payment response to the server for verification
            const verifyResponse = await fetch("/verify", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                    selectedAddress,// Pass the address or any other required data
                    paymentMethod
                }),
            });

            const verificationResult = await verifyResponse.json();

            // Check if payment verification is successful
            if (verificationResult.success&& verificationResult.orderId) {
                // Show SweetAlert2 Toast on successful payment and order
                Swal.fire({
                    position: 'top-right',
                    icon: 'success',
                    title: 'Payment verified and order placed successfully!',
                    showConfirmButton: false,
                    timer: 3000,
                    toast: true,
                    background: '#28a745', // Success green color
                    color: '#fff', // White text color
                    animation: false // Disable animation (optional)
                });
                setTimeout(() => {
                    window.location.href=`/invoice/${verificationResult.orderId}`
                }, 2000);
            } else {
                // Show error if payment verification fails
                Swal.fire({
                    position: 'top-right',
                    icon: 'error',
                    title: 'Payment verification failed.',
                    showConfirmButton: false,
                    timer: 3000,
                    toast: true,
                    background: '#dc3545', // Error red color
                    color: '#fff', // White text color
                });
                setTimeout(() => {
                    window.location.href="/invoice"
                }, 2000);
            }
        },
        prefill: {
            name: "Rizvan",
            email: "rizvanichu17@gmail.com",
            contact: "1234567890",
        },
    };

    // Open Razorpay payment modal
    const rzp1 = new Razorpay(options);
    rzp1.open();
} catch (error) {
    console.error("Error during payment processing:", error);
}

};
    }

    function handleOrderResponse(data) {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Order Placed Successfully',
                text: data.message,
                confirmButtonText: 'ok'
            }).then(() => {
                if (data.cartEmpty) {
                    window.location.href =  `/invoice/${data.orderId}`;
                } else {
                    window.location.href =  `/invoice/${data.orderId}`;
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Order Failed',
                text: data.error
            });
        }
    }

    function handleOrderError(error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Error',
            text: 'There was an error placing your order. Please try again.'
        });
    
        }
    </script>
</body>
</html>
